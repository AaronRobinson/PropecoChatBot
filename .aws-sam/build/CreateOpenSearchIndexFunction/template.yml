AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Serverless RAG Lex chatbot application using Knowledge Base, Agents, Opensearch Serverless'

Parameters:
  S3SourceBucketName:
    Type: String
    Description: Name of source bucket that holds the documents to be used for the knowledge base S3 bucket
    Default: propeco-src-bucket

  SrcBucketPath:
    Type: String
    Description: Path of source bucket from where fiels need to be copied
    Default: propeco-chatbot/docs/

  S3BucketName:
    Type: String
    Description: Name of bucket that will hold source data for knowledge base
    Default: propeco-rag-kb-bucket
  
  AOSSCollectionName:
    Default: propeco-aoss
    Type: String
    Description: Name of the Amazon OpenSearch Service Serverless (AOSS) collection.
    MinLength: 1
    MaxLength: 21
    AllowedPattern: ^[a-z0-9](-*[a-z0-9])*
    ConstraintDescription: Must be lowercase or numbers with a length of 1-63 characters.

  AOSSIndexName:
    Default: propeco-aoss-index
    Type: String
    Description: Name of the vector index in the Amazon OpenSearch Service Serverless (AOSS) collection.

  IAMUserArn: 
    Default: arn:aws:iam::466718915578:user/anton.nazaruk
    Description: The Arn of the IAM user (or assumed role) running this CloudFormation template.
    Type: String
  
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Description: Creating Amazon S3 bucket to hold source data for knowledge base
    Properties:
      BucketName: !Join
        - '-'
        - - !Ref S3BucketName
          - !Sub ${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Project
          Value: Propeco-chatbot
        - Key: Client
          Value: Propeco
        - Key: Owner
          Value: Babar

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: S3Bucket
    Properties:
      Tags:
        - Key: Project
          Value: Propeco-chatbot
        - Key: Client
          Value: Propeco
        - Key: Owner
          Value: Babar
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${S3SourceBucketName}/*
                  - !Sub arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action: 
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${S3SourceBucketName}
                  - !Sub arn:aws:s3:::${S3Bucket}
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: "*"

  CustomFunctionCopyContentsToS3Bucket:
    Type: AWS::Lambda::Function
    DependsOn: LambdaBasicExecutionRole
    Properties:
      Tags:
        - Key: Project
          Value: Propeco-chatbot
        - Key: Client
          Value: Propeco
        - Key: Owner
          Value: Babar
      Handler: index.lambda_handler
      Description: "Copies files from the source bucket to knowledge base bucket"
      Timeout: 30
      Role: !GetAtt 'LambdaBasicExecutionRole.Arn'
      Runtime: python3.11
      Environment:
        Variables:
          SRC_BUCKET: !Ref S3SourceBucketName
          DST_BUCKET: !Ref S3Bucket
          SRC_PREFIX: !Ref SrcBucketPath
      Code:
        ZipFile: |
          import os
          import boto3
          import logging
          import cfnresponse
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          SRC_BUCKET = os.environ.get('SRC_BUCKET')
          DST_BUCKET = os.environ.get('DST_BUCKET')
          SRC_PREFIX = os.environ.get('SRC_PREFIX')

          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))

            if event['RequestType'] == 'Delete':
              logger.info(f"copy files function called at the time of stack deletion, skipping")
              response = dict(files_copied=0, error=None)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              return

            try:
              s3 = boto3.client('s3')
              paginator = s3.get_paginator('list_objects_v2')
              operation_parameters = {
                  'Bucket': SRC_BUCKET,
                  'Prefix': SRC_PREFIX
              }
              page_iterator = paginator.paginate(**operation_parameters)
              ctr = 0
              
              for page in page_iterator:
                if 'Contents' in page:
                  for obj in page['Contents']:
                    src_key = obj['Key']
                    if src_key.endswith('/'):
                        continue  # skip folders
                    
                    logger.info(f"Copying {src_key} to destination bucket={DST_BUCKET}")
                    copy_source = {'Bucket': SRC_BUCKET, 'Key': src_key}
                    dst_key = src_key[len(SRC_PREFIX):]  # remove prefix from destination key
                    
                    s3.copy_object(CopySource=copy_source, Bucket=DST_BUCKET, Key=dst_key)
                    ctr += 1
                
              response = dict(files_copied=ctr, error=None)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              
            except Exception as e:
              logger.error(e)
              response = dict(files_copied=0, error=str(e))
              cfnresponse.send(event, context, cfnresponse.FAILED, response)

            return

  CustomSGResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: CustomFunctionCopyContentsToS3Bucket
    Properties:
      ServiceToken: !GetAtt 'CustomFunctionCopyContentsToS3Bucket.Arn'
    
  CreateOpenSearchIndexFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Project
          Value: Propeco-chatbot
        - Key: Client
          Value: Propeco
        - Key: Owner
          Value: Babar
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OpenSearchAdminPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - opensearchserverless:*
                  - aoss:*
                Resource: "*"
  
  AmazonBedrockExecutionRoleForKnowledgeBase:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Project
          Value: Propeco-chatbot
        - Key: Client
          Value: Propeco
        - Key: Owner
          Value: Babar
      RoleName: !Join
        - '-'
        - - AmazonBedrockExecutionRoleForKnowledgeBase
          - !Ref AOSSCollectionName
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
              ArnLike:
                "AWS:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*"
      Path: /
      Policies:
        - PolicyName: S3ReadOnlyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Describe*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
                Resource:
                  - !Sub arn:aws:s3:::${S3SourceBucketName}/*
                  - !Sub arn:aws:s3:::${S3Bucket}/*
                  - !Sub arn:aws:s3:::${S3SourceBucketName}
                  - !Sub arn:aws:s3:::${S3Bucket}
        - PolicyName: AOSSAPIAccessAll
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: !Sub arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
        - PolicyName: BedrockListAndInvokeModel
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:ListCustomModels
                Resource: '*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/*

  EncryptionPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    DependsOn:
      - CreateOpenSearchIndexFunctionRole
      - AmazonBedrockExecutionRoleForKnowledgeBase
    Properties:
      Name: !Join
        - '-'
        - - !Ref AOSSCollectionName
          - security-policy
      Type: encryption
      Description: Encryption policy for AOSS collection
      Policy: !Sub >-
        {"Rules":[{"ResourceType":"collection","Resource":["collection/${AOSSCollectionName}"]}],"AWSOwnedKey":true}

  Collection:
    Type: 'AWS::OpenSearchServerless::Collection'
    DependsOn: EncryptionPolicy
    Properties:
      Tags:
        - Key: Project
          Value: Propeco-chatbot
        - Key: Client
          Value: Propeco
        - Key: Owner
          Value: Babar
      Name: !Ref AOSSCollectionName
      Type: VECTORSEARCH
      Description: Collection to holds vector search data

  DataAccessPolicy:
    Type: 'AWS::OpenSearchServerless::AccessPolicy'
    DependsOn: Collection
    Properties:
      Name: !Join
        - '-'
        - - !Ref AOSSCollectionName
          - access-policy
      Type: data
      Description: Access policy for AOSS collection
      Policy: !Sub
        - | 
          [{
            "Description": "Access for cfn user",
            "Rules": [
              {
                "ResourceType": "index",
                "Resource": ["index/*/*"],
                "Permission": ["aoss:*"]
              },
              {
                "ResourceType": "collection",
                "Resource": ["collection/${AOSSCollectionName}"],
                "Permission": ["aoss:*"]
              }
            ],
            "Principal": [
              "${IAMUserArn}",
              "${AmazonBedrockExecutionRoleForKnowledgeBase}",
              "${CreateOpenSearchIndexFunctionRoleArn}"
            ]
          }]
        - {
            IAMUserArn: !Ref IAMUserArn,
            AmazonBedrockExecutionRoleForKnowledgeBase: !GetAtt AmazonBedrockExecutionRoleForKnowledgeBase.Arn,
            CreateOpenSearchIndexFunctionRoleArn: !GetAtt CreateOpenSearchIndexFunctionRole.Arn
          }

  NetworkPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    DependsOn: DataAccessPolicy
    Properties:
      Name: !Join
        - '-'
        - - !Ref AOSSCollectionName
          - network-policy
      Type: network
      Description: Network policy for AOSS collection
      Policy: !Sub >-
        [{"Rules":[{"ResourceType":"collection","Resource":["collection/${AOSSCollectionName}"]}, {"ResourceType":"dashboard","Resource":["collection/${AOSSCollectionName}"]}],"AllowFromPublic":true}]

  CreateOpenSearchIndexFunction:
    Type: AWS::Serverless::Function
    DependsOn: NetworkPolicy
    Properties:
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      Role: !GetAtt CreateOpenSearchIndexFunctionRole.Arn
      Tags:
        Project: Propeco-chatbot
        Client: Propeco
        Owner: Babar
      Environment:
        Variables:
          REGION: !Sub "${AWS::Region}"
          AOSS_COLLECTION_NAME: !Ref AOSSCollectionName
          AOSS_INDEX_NAME: !Ref AOSSIndexName
      CodeUri: .

  CreateAOSSIndexCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateOpenSearchIndexFunction.Arn
    DependsOn: 
      - Collection
      - CustomSGResource
      - CreateOpenSearchIndexFunction

  AmazonBedrockExecutionRoleForAgentsQA:
    Type: AWS::IAM::Role
    DependsOn: CreateAOSSIndexCustomResource
    Properties:
      Tags:
        - Key: Project
          Value: Propeco-chatbot
        - Key: Client
          Value: Propeco
        - Key: Owner
          Value: Babar
      RoleName: AmazonBedrockExecutionRoleForAgents
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
    
  KnowledgeBaseWithAoss:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Tags:
        Project: Propeco-chatbot
        Client: Propeco
        Owner: Babar
      Name: !Ref AOSSCollectionName
      Description: "Answer based only on information contained in knowledge base."
      RoleArn: !GetAtt AmazonBedrockExecutionRoleForKnowledgeBase.Arn
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v2:0"
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"
        OpensearchServerlessConfiguration:
          CollectionArn: !GetAtt Collection.Arn
          VectorIndexName: !Ref AOSSIndexName
          FieldMapping:
            VectorField: "vector"
            TextField: "text"
            MetadataField: "metadata"
    DependsOn: AmazonBedrockExecutionRoleForAgentsQA

  SampleDataSource:
    Type: AWS::Bedrock::DataSource
    DependsOn: KnowledgeBaseWithAoss
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBaseWithAoss
      Name: !Ref AOSSCollectionName
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: !GetAtt S3Bucket.Arn
